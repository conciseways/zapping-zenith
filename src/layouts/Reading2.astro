---
import type { MarkdownLayoutProps } from "astro";
import { Image } from "astro:assets";
import Layout from "./Layout.astro";
import Welcome from "../components/Welcome.astro";
import {toClassicalPronunciation} from "../scripts/classical/index.js"

type Props = MarkdownLayoutProps<{
    title: string;
    text: string;
    image?: {
        src: string | ImageMetadata;
        alt?: string;
    };
    audio?: {
        src: string;
        type?: string;
    };
    vocabulary?: {
        id: string;
        root: string;
        type: string;
        gender: string;
        definition: string;
        declension?: string;
        conjugation?: string;
    }[];
}>

const { title, text, image, audio, vocabulary } = Astro.props.frontmatter;
const words = text.split(' ').map((word, index) => `<span class="word" data-word="${word}" data-index="${index}">${word}</span>`).join(' ');
---

<Layout>
    <Welcome>
        <div class="reading-container">
            <h1>{title}</h1>
            {image && (
                <div class="image-container">
                    <Image
                        src={image.src}
                        alt={image.alt || title}
                        width={800}
                        height={450}
                        class="reading-image"
                    />
                </div>
            )}
            <p class="mainText" data-text-main={text} set:html={words} />
            {audio && (
                <audio controls>
                    <source src={audio.src} type={audio.type} />
                    Your browser does not support the audio element.
                </audio>
            )}
            {vocabulary && (
                <div class="vocabulary-container">
                    <data id="vocabulary" value={JSON.stringify(vocabulary)}>Vocabulary Items</data>
                    {vocabulary.map(item => (
                        <data id={item.id} value={JSON.stringify({
                            root: item.root,
                            type: item.type,
                            gender: item.gender,
                            definition: item.definition,
                            declension: item.declension || item.conjugation
                        })}>{item.root}</data>
                    ))}
                </div>
            )}
        </div>
        <div class="sliding-pane">
            <button class="close-pane">&times;</button>
            <div class="pane-content">
                <h2>Selected Word</h2>
                <p class="selected-word"></p>
                <div class="word-info">
                    <h3>Definition</h3>
                    <p>Click a word to see its definition.</p>
                </div>
            </div>
        </div>
    </Welcome>
</Layout>

<style>
    .reading-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 1rem;
    }

    .image-container {
        margin: 2rem 0;
        border-radius: 8px;
        overflow: hidden;
    }

    .reading-image {
        width: 100%;
        height: auto;
        display: block;
    }

    .mainText {
        font-size: 2rem;
        margin: 2rem 0;
        text-align: center;
    }

    .word {
        cursor: pointer;
        transition: color 0.2s ease;
        display: inline-block;
        padding: 0 0.1em;
    }

    .word:hover {
        color: #666;
    }

    .selected-word {
        font-size: 2rem;
        margin: 1rem 0;
        padding: 0.5rem;
        background: rgba(0, 0, 0, 0.05);
        border-radius: 4px;
        text-align: center;
    }

    .word-info {
        margin-top: 2rem;
    }

    .sliding-pane {
        position: fixed;
        top: 0;
        right: -400px;
        width: 400px;
        height: 100vh;
        background: var(--background-color);
        box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        z-index: 1000;
        padding: 2rem;
        overflow-y: auto;
        opacity: 0;
        visibility: hidden;
        pointer-events: none;
    }

    .sliding-pane.open {
        right: 0;
        opacity: 1;
        visibility: visible;
        pointer-events: all;
    }

    .close-pane {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0.5rem;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-color);
    }

    .close-pane:hover {
        background: rgba(0, 0, 0, 0.1);
    }

    .pane-content {
        margin-top: 2rem;
    }

    audio {
        width: 100%;
        margin: 1rem 0;
        filter: invert(0.9);
        background-color: #2a2a2a;
        border-radius: 8px;
        padding: 0.5rem;
    }

    audio::-webkit-media-controls-panel {
        background-color: #2a2a2a;
    }

    audio::-webkit-media-controls-current-time-display,
    audio::-webkit-media-controls-time-remaining-display {
        color: #ffffff;
    }

    audio::-webkit-media-controls-play-button,
    audio::-webkit-media-controls-mute-button {
        filter: invert(1);
    }

    .controls {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }

    button {
        padding: 0.5rem 1rem;
        border-radius: 4px;
        border: 1px solid #ccc;
        background: #fff;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    button:hover {
        background: #f0f0f0;
    }

    :root {
        --background-color: #ffffff;
        --text-color: #000000;
    }

    :global(.dark) {
        --background-color: #1a1a1a;
        --text-color: #ffffff;
    }

    .vocabulary-container {
        margin-top: 2rem;
    }

    .vocabulary-container data {
        display: block;
        margin-bottom: 1rem;
    }
</style>

<script>
    const textEl = document.querySelector('[data-text-main]')
    const mainText = textEl?.getAttribute('data-text-main')
    const playBtn = document.querySelector('.play')
    const stopBtn = document.querySelector('.stop')
    const checkVoices = document.querySelector('.checkVoices')
    const synth = window.speechSynthesis
    const slidingPane = document.querySelector('.sliding-pane')
    const closePane = document.querySelector('.close-pane')
    const selectedWordEl = document.querySelector('.selected-word')
    const wordInfoEl = document.querySelector('.word-info')
    const vocabulary = document.getElementById('vocabulary');



    // Word click functionality
    document.querySelectorAll('.word').forEach(word => {
        word.addEventListener('click', (e) => {
            const clickedWord = (e.target as HTMLElement).getAttribute('data-word')
            const clickedIndex = (e.target as HTMLElement).getAttribute('data-index')
            if (selectedWordEl && clickedWord) {
                tester(clickedWord, vocabulary)
                populateWordInfo(clickedWord)
                selectedWordEl.textContent = clickedWord
                slidingPane?.classList.add('open')
            }
            e.stopPropagation() // Prevent event from bubbling to document
        })
    })

    closePane?.addEventListener('click', () => {
        slidingPane?.classList.remove('open')
    })

    // Close pane when clicking outside
    document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement
        if (!slidingPane?.contains(target) && !target.classList.contains('word')) {
            slidingPane?.classList.remove('open')
        }
    })

    const voices = synth.getVoices()
    const msg = new SpeechSynthesisUtterance()
    msg.text = mainText || "hi"

    msg?.addEventListener("boundary", event => {
        const {charIndex, charLength} = event
        const wordBeginingIndex = charIndex
        const wordEndIndex = charIndex + charLength
        
        const word = mainText?.slice(wordBeginingIndex, wordEndIndex)
        const before = mainText?.slice(0, wordBeginingIndex)
        const after = mainText?.slice(wordEndIndex)
        const updatedText = `${before}<strong>${word}</strong>${after}`
        const p$ = document.querySelector(".mainText")
        if(p$) {
            p$.innerHTML = updatedText
        }
    })

    playBtn?.addEventListener("click", () => {
        try {
            speechSynthesis.speak(msg)
        } catch (error) {
            console.log("playBtn err: ", error)
        }
    })

    stopBtn?.addEventListener("click", () => {
        speechSynthesis.cancel()
    })

    checkVoices?.addEventListener("click", () => {
        const voices = synth.getVoices()
        if(voices) {
            for(let voiceKey in voices) {
                const voice = voices[voiceKey]
                if(voice.name == "Google fran√ßais") {
                    msg.voice = voice
                }
            }
        }
    })

    function tester(word: string, vocabulary: string | null) {
        if(vocabulary && vocabulary?.value) {
            try {
                const pageVocab = JSON.parse(vocabulary?.value)
                console.log(pageVocab)
                console.log(findClickedWordRoot(pageVocab, word))

            }
            catch (error) {
                throw new Error("Failed to parse vocabulary data", error)
            }
        }
    }

function findClickedWordRoot(vocabularyArray, word) {
    for (const item of vocabularyArray) {
        const regex = new RegExp(`^${item.root}`, 'i'); // Create a regex to match the root at the beginning of the word, case insensitive
        if (regex.test(word)) {
            return item; // Return the entire object if the root matches
        }
    }
    return null; // Return null if no match is found
}

function populateWordInfo(clickedWord) {
    const vocabulary = document.getElementById('vocabulary');
    if (vocabulary && vocabulary.value) {
        const pageVocab = JSON.parse(vocabulary.value);
        const wordData = findClickedWordRoot(pageVocab, clickedWord);
        const slidingPane = document.querySelector('.sliding-pane');
        const wordInfoEl = document.querySelector('.word-info');

        if (wordData) {
            // Clear previous content
            wordInfoEl.innerHTML = '';

            // Populate sliding pane based on the type of word
            if (wordData.type === 'noun') {
                wordInfoEl.innerHTML = `<h3>${wordData.root} (Noun)</h3><p>Definition: ${wordData.definition}</p><p>Gender: ${wordData.gender}</p>`;
            } else if (wordData.type === 'verb') {
                wordInfoEl.innerHTML = `<h3>${wordData.root} (Verb)</h3><p>Definition: ${wordData.definition}</p><p>Conjugation: ${wordData.conjugation}</p>`;
            }
            slidingPane.classList.add('open');
        }
    }
}

</script>
